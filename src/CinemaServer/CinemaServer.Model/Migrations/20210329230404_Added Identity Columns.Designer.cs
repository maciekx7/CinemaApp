// <auto-generated />
using System;
using CinemaServer.Model.cinemadb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaServer.Model.Migrations
{
    [DbContext(typeof(cinemadbContext))]
    [Migration("20210329230404_Added Identity Columns")]
    partial class AddedIdentityColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cinemadb")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("phone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex(new[] { "Id" }, "client_id_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.ToTable("Client", "cinemadb");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("Dubbing")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("dubbing");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("image_name");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("producer");

                    b.Property<bool>("Subtitles")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("subtitles");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "movie_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("Movie", "cinemadb");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.ReservationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.HasKey("Id");

                    b.ToTable("Reservation_type", "cinemadb");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.HasKey("Id", "MovieId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MovieId" }, "fk_Screening_Movie1_idx");

                    b.HasIndex(new[] { "Id" }, "screening_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("Screening", "cinemadb");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("SeatColumn")
                        .HasColumnType("int")
                        .HasColumnName("seat_column");

                    b.Property<string>("SeatRow")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("seat_row");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("Seat", "cinemadb");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.SeatReserved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("screening_id");

                    b.Property<int>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    b.HasKey("Id", "TicketId", "ScreeningId", "SeatId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ScreeningId" }, "screening_id_fk_idx");

                    b.HasIndex(new[] { "SeatId" }, "seat_id_fk_idx");

                    b.HasIndex(new[] { "TicketId" }, "ticket_id_fk_idx");

                    b.ToTable("Seat_reserved", "cinemadb");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int")
                        .HasColumnName("screening_id");

                    b.Property<int>("ReservationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("reservation_type_id");

                    b.Property<string>("ClientId")
                        .HasColumnType("varchar(85)")
                        .HasColumnName("Client_id");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("price");

                    b.Property<string>("QrCode")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("qr_code");

                    b.HasKey("Id", "ScreeningId", "ReservationTypeId", "ClientId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ClientId" }, "fk_Ticket_Client1_idx");

                    b.HasIndex(new[] { "QrCode" }, "qr_code_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "ReservationTypeId" }, "reservation_type_id_fk_idx");

                    b.HasIndex(new[] { "ScreeningId" }, "screening_id_idx");

                    b.HasIndex(new[] { "Id" }, "ticket_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("Ticket", "cinemadb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Name")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Screening", b =>
                {
                    b.HasOne("CinemaServer.Model.cinemadb.Movie", "Movie")
                        .WithMany("Screenings")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("movie_id_screening_fk")
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.SeatReserved", b =>
                {
                    b.HasOne("CinemaServer.Model.cinemadb.Screening", "Screening")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("screening_id_seatReservation_fk")
                        .HasPrincipalKey("Id")
                        .IsRequired();

                    b.HasOne("CinemaServer.Model.cinemadb.Seat", "Seat")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("seat_id_seatReservation_fk")
                        .IsRequired();

                    b.HasOne("CinemaServer.Model.cinemadb.Ticket", "Ticket")
                        .WithMany("SeatReserveds")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("ticket_id_seatReservation_fk")
                        .HasPrincipalKey("Id")
                        .IsRequired();

                    b.Navigation("Screening");

                    b.Navigation("Seat");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Ticket", b =>
                {
                    b.HasOne("CinemaServer.Model.cinemadb.Client", "Client")
                        .WithMany("Tickets")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_Ticket_Client1")
                        .IsRequired();

                    b.HasOne("CinemaServer.Model.cinemadb.ReservationType", "ReservationType")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationTypeId")
                        .HasConstraintName("reservationType_ticket_id_fk")
                        .IsRequired();

                    b.HasOne("CinemaServer.Model.cinemadb.Screening", "Screening")
                        .WithMany("Tickets")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("screening_id_ticket_fk")
                        .HasPrincipalKey("Id")
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ReservationType");

                    b.Navigation("Screening");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CinemaServer.Model.cinemadb.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CinemaServer.Model.cinemadb.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaServer.Model.cinemadb.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CinemaServer.Model.cinemadb.Client", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Client", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Movie", b =>
                {
                    b.Navigation("Screenings");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.ReservationType", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Screening", b =>
                {
                    b.Navigation("SeatReserveds");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Seat", b =>
                {
                    b.Navigation("SeatReserveds");
                });

            modelBuilder.Entity("CinemaServer.Model.cinemadb.Ticket", b =>
                {
                    b.Navigation("SeatReserveds");
                });
#pragma warning restore 612, 618
        }
    }
}
